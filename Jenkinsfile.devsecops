/**
 * This pipeline will build and deploy a Docker image with Kaniko
 * https://github.com/GoogleContainerTools/kaniko
 * without needing a Docker host
 *
 * You need to create a jenkins-docker-cfg secret with your docker config
 * as described in
 * https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/#create-a-secret-in-the-cluster-that-holds-your-authorization-token
 *
 * ie.
 * kubectl create secret docker-registry regcred --docker-server=https://index.docker.io/v1/ --docker-username=csanchez --docker-password=mypassword --docker-email=john@doe.com
 */

pipeline {
  agent any
  environment {
    namespace = "dev"
    appName = "todos"
    commitId = "${sh(script:'git rev-parse --short HEAD', returnStdout: true)}"
    applicationDNS = "todos.demo.io"
  }
  stages {
    stage('Build artifact') {
      agent {
        kubernetes {
          defaultContainer 'golang'
          yaml '''
            apiVersion: v1
            kind: Pod
            spec:
              containers:
              - name: golang
                image: golang:1.20
                command:
                - sleep
                args:
                - 99d
            '''
        }
      }
      steps {
        sh 'go mod download'
        sh  'CGO_ENABLED=0 GOOS=linux go build -buildvcs=false -o todos'
        stash includes: 'todos', name: 'app'
      }
    }
    stage('Sonarqube SAST') {
      agent {
        kubernetes {
          defaultContainer 'sonarscanner'
          yaml '''
            apiVersion: v1
            kind: Pod
            spec:
              containers:
              - name: sonarscanner
                image: sonarsource/sonar-scanner-cli
                command:
                - sleep
                args:
                - 99d
            '''
        }
      }
      steps {
//        sh 'sonar-scanner \
//          -Dsonar.projectKey=todos \
//          -Dsonar.sources=. \
//          -Dsonar.host.url=http://sonarqube.demo.io \
//          -Dsonar.token=sqp_76c022313f89a1517333b4004cbb0319f2d0d0c3'
        withSonarQubeEnv('SonarQube') {
          sh 'sonar-scanner \
           -Dsonar.projectKey=todos \
           -Dsonar.sources=. \
           -Dsonar.host.url=http://sonarqube.demo.io'
        }
        timeout(time: 3, unit: 'MINUTES') {
          waitForQualityGate abortPipeline: true
        }
      }
    }
    stage('Vulnerability Scan - Docker') {
      parallel {
        stage ("Go dependency Check") {
          agent {
            kubernetes {
              defaultContainer 'golang'
              yaml '''
                apiVersion: v1
                kind: Pod
                spec:
                  containers:
                  - name: golang
                    image: golang:1.20
                    command:
                    - sleep
                    args:
                    - 99d
                '''
            }
          }
          steps {
              sh 'go install golang.org/x/vuln/cmd/govulncheck@latest'
              sh 'govulncheck ./...'
          }
        }
        stage ("Trivy Scan") {
          agent {
            kubernetes {
              defaultContainer 'trivy'
              yaml '''
                apiVersion: v1
                kind: Pod
                spec:
                  containers:
                  - name: trivy
                    image: aquasec/trivy:0.41.0
                    command:
                    - sleep
                    args:
                    - 99d
                '''
            }
          }
          steps {
            sh 'sh trivy-docker-image-scan.sh'
          }
        }
        stage ("OPA Conftest") {
          agent {
            kubernetes {
              defaultContainer 'conftest'
              yaml '''
                apiVersion: v1
                kind: Pod
                spec:
                  containers:
                  - name: conftest
                    image: openpolicyagent/conftest
                    command:
                    - sleep
                    args:
                    - 99d
                '''
            }
          }
          steps {
            sh 'conftest test --policy opa-docker-security.rego Dockerfile'
          }
        }
      }
    }
    stage('Build Docker Container and Push') {
      agent {
        kubernetes {
          defaultContainer 'kaniko'
          yaml '''
            kind: Pod
            spec:
              containers:
              - name: kaniko
                image: gcr.io/kaniko-project/executor:v1.6.0-debug
                imagePullPolicy: Always
                command:
                - sleep
                args:
                - 99d
                volumeMounts:
                  - name: jenkins-docker-cfg
                    mountPath: /kaniko/.docker
                env:
                  - name: IMAGE_NAME
                    value: ${imageName}
              volumes:
              - name: jenkins-docker-cfg
                projected:
                  sources:
                  - secret:
                      name: regcred
                      items:
                        - key: .dockerconfigjson
                          path: config.json
                '''
        }
      }
      steps {
        unstash 'app'
        sh '/kaniko/executor -f `pwd`/Dockerfile -c `pwd` --force --insecure --skip-tls-verify --cache=true --destination=omerurhan/todos:${commitId}'
      }
    }
    stage ('Vulnerability Scan - Kubernetes') {
      agent {
        kubernetes {
          defaultContainer 'conftest'
          yaml '''
            apiVersion: v1
            kind: Pod
            spec:
              containers:
              - name: conftest
                image: openpolicyagent/conftest
                command:
                - sleep
                args:
                - 99d
            '''
        }
      }
      steps {
        sh 'conftest test --policy opa-k8s-security.rego kubernetes/deployment.yaml'
        sh 'conftest test --policy opa-k8s-security.rego kubernetes/service.yaml'
      }
    }
    stage('Deploy Kubernetes Dev') {
      agent {
        kubernetes {
          defaultContainer 'kubectl'
          yaml '''
            apiVersion: v1
            kind: Pod
            spec:
              containers:
              - name: kubectl
                image: alpine/k8s:1.25.0
                command:
                - sleep
                args:
                - 99d
            '''
        }
      }
      steps {
        parallel(
          "Deployment": {
            withKubeConfig([credentialsId: 'kubeconfig']) {
            sh 'for f in kubernetes/*.yaml; do envsubst < $f | kubectl apply -f -; done'
            }
          },
          "Rollout Status": {
            withKubeConfig([credentialsId: 'kubeconfig']) {
            sh '''
              sleep 60s
              kubectl -n ${namespace} rollout status deploy ${appName} --timeout 5s
              retVal=$?
              if [ $retVal -ne 0 ]; then
                  echo "Deployment ${appName} Rollout has Failed. Rolling back deployment!"
                  kubectl -n ${namespace} rollout undo deploy ${appName}
              fi
              exit $retVal
            '''
            }
          }
        )
      }
    }
    stage ('Integration Test') {
      agent {
        kubernetes {
          defaultContainer 'curl'
          yaml '''
            apiVersion: v1
            kind: Pod
            spec:
              containers:
              - name: curl
                image: curlimages/curl:8.1.1
                command:
                - sleep
                args:
                - 99d
            '''
        }
      }
      steps {
        sh '''
        sleep 5s

        http_get_code=$(curl -s -o /dev/null -w "%{http_code}" http://${applicationDNS}
        if [[ "$http_get_code" == 200 ]];
            then
                echo "indexHandler Test Passed"
            else
                echo "indexHandler Test Failed"
                exit 1;
        fi

        # HTTP POST test
        http_post_code=$(curl --data-raw 'Item=DEVSECOPS' -L -s -o /dev/null -w "%{http_code}" -H 'Content-Type: application/x-www-form-urlencoded' http://${applicationDNS})
        if [[ "$http_post_code" == 200 ]];
            then
                echo "postHandler Test Passed"
            else
                echo "postHandler Test Failed"
                exit 1;
        fi
        '''
      }
    }
  }
}
